# coding: utf-8
class Seriously::V1::PurchasesController < Seriously::V1::BaseController
  # Create a purchase, its payment and delivery
  def create
    currency = params[:currency] || Preference[:currency]

    # Create supplier
    supplier = find_entity(params[:supplier])
    puts supplier.inspect

    # Find purchase nature
    nature = find_purchase_nature(currency)

    # Find responsible
    responsible = find_responsible

    # Create purchase
    items = params[:items].each_with_index.each_with_object({}) do |(item, index), hash|
      variant = ProductNatureVariant.import_from_nomenclature(item[:variant])
      tax = Tax.import_from_nomenclature(item[:tax])
      hash[index.to_s] = {
        quantity: item[:quantity].to_f,
        unit_pretax_amount: item[:unit_pretax_amount].to_f,
        variant_id: variant.id,
        tax_id: tax.id
      }.stringify_keys
    end
    puts items.to_yaml.green
    purchase = Purchase.create!(
      nature: nature,
      supplier: supplier,
      responsible: responsible,
      invoiced_at: params[:invoiced_on],
      items_attributes: items
    )
    purchase.propose!
    purchase.confirm!
    purchase.invoice!

    # Find outgoing payment mode
    mode = find_outgoing_payment_mode(currency)

    # Create outgoing_payment
    puts purchase.items.to_yaml.yellow
    outgoing_payment = OutgoingPayment.create!(
      mode: mode,
      payee: supplier,
      to_bank_at: purchase.invoiced_at,
      responsible: responsible,
      amount: purchase.amount
    )

    # Attach outgoing_payment to purchase affair
    purchase.deal_with!(outgoing_payment.affair)

    # Create outoging_delivery
    items = params[:items].map do |item|
      # Get product informations
      variant = ProductNatureVariant.import_from_nomenclature(item[:variant])
      attrs = { population: item[:quantity], container: find_container }
      product = { variant: variant, initial_population: item[:quantity] }
      if item[:product]
        product.update(item.require(:product).permit(:name, :description, :born_at, :identification_number, :work_number))
      end
      attrs[:product_attributes] = product
      attrs
    end
    incoming_delivery = IncomingDelivery.create!(
      address: find_main_address,
      purchase: purchase,
      sender: supplier,
      mode: :delivered_at_place,
      reference_number: params[:number],
      received_at: params[:invoiced_at],
      items_attributes: items
    )

    result = {
      purchase: {
        id: purchase.id,
        number: purchase.number
      },
      outgoing_payment: {
        id: outgoing_payment.id,
        number: outgoing_payment.number
      },
      incoming_delivery: {
        id: incoming_delivery.id,
        number: incoming_delivery.number
      }
    }
    render json: result.to_json
  end

  protected

  def find_purchase_nature(currency)
    unless nature = PurchaseNature.actives.where(currency: currency).order(by_default: :desc).first
      unless journal = Journal.where(nature: 'purchases', currency: currency).order(:id).first
        journal = Journal.create!(name: 'enumerize.journal.nature.purchases'.t, nature: :purchases, currency: Preference[:currency])
      end
      nature = PurchaseNature.create!(currency: Preference[:currency], by_default: true, active: true, with_accounting: true, journal: journal, description: 'Generated by Serious')
    end
    nature
  end

  def find_responsible
    user = nil
    user = User.find_by(email: params[:responsible]) if params[:responsible]
    user ||= User.where(locked: false).all.sample
    user
  end

  def find_main_address
    unless address = Entity.of_company.default_mail_address
      address = Entity.of_company.addresses.create!(canal: :mail, mail_line_6: '47000 AGEN')
    end
    address
  end

  def find_container
    unless container = Product.can('store(matter)').first
      container = Building.create!(name: 'EntrepÃ´t', address: find_main_address, variant: ProductNatureVariant.import_from_nomenclature(:building))
    end
    container
  end

  def find_outgoing_payment_mode(currency)
    unless cash = Cash.find_by(nature: :bank_account, currency: currency)
      nature = :bank_account
      journal = Journal.find_or_initialize_by(nature: :bank, currency: currency)
      journal.name = 'enumerize.journal.nature.bank'.t
      journal.save!
      account = Account.find_or_create_in_chart(:banks)
      cash = Cash.create!(name: "enumerize.cash.nature.#{nature}".t, nature: nature.to_s,
                          account: account, journal: journal)
    end
    mode = OutgoingPaymentMode.find_or_initialize_by(cash: cash, with_accounting: true)
    mode.name ||= OutgoingPaymentMode.tc('default.transfer.name')
    mode.save!
    mode
  end
end
